#!/usr/bin/env python3
"""
Servidor MCP RAG simplificado para debugging
"""

import asyncio
import logging
import sys
from pathlib import Path

# A√±adir src al path - CORREGIDO
project_root = Path(__file__).parent.parent if Path(__file__).parent.name == "src" else Path(__file__).parent
src_path = project_root / "src"
sys.path.insert(0, str(src_path))

# Configurar logging detallado
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - [%(levelname)s] - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_initialization():
    """Test paso a paso de la inicializaci√≥n"""
    
    logger.info("üîÑ PASO 1: Importando configuraci√≥n...")
    try:
        from src.config import settings
        logger.info(f"‚úÖ Configuraci√≥n cargada - Ollama URL: {settings.ollama.url}")
    except Exception as e:
        logger.error(f"‚ùå Error importando configuraci√≥n: {e}")
        return False
    
    logger.info("üîÑ PASO 2: Importando servicios...")
    try:
        from src.services.rag_service import RAGService
        logger.info("‚úÖ RAGService importado")
    except Exception as e:
        logger.error(f"‚ùå Error importando RAGService: {e}")
        return False
    
    logger.info("üîÑ PASO 3: Creando instancia RAGService...")
    try:
        rag_service = RAGService()
        logger.info("‚úÖ RAGService instanciado")
    except Exception as e:
        logger.error(f"‚ùå Error instanciando RAGService: {e}")
        return False
    
    logger.info("üîÑ PASO 4: Verificando conectividad Ollama...")
    try:
        import requests
        response = requests.get(f"{settings.ollama.url}/api/tags", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ Ollama disponible")
        else:
            logger.warning(f"‚ö†Ô∏è Ollama respuesta: {response.status_code}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Ollama no disponible: {e}")
    
    logger.info("üîÑ PASO 5: Inicializando RAGService (sin Ollama)...")
    try:
        # Comentar la inicializaci√≥n de Ollama temporalmente
        logger.info("‚úÖ Inicializaci√≥n b√°sica completada (sin Ollama)")
    except Exception as e:
        logger.error(f"‚ùå Error en inicializaci√≥n: {e}")
        return False
    
    logger.info("üîÑ PASO 6: Importando MCP...")
    try:
        from mcp.server import Server
        from mcp.server.stdio import stdio_server
        from mcp.types import Tool, TextContent
        logger.info("‚úÖ MCP importado")
    except Exception as e:
        logger.error(f"‚ùå Error importando MCP: {e}")
        return False
    
    logger.info("üîÑ PASO 7: Creando servidor MCP...")
    try:
        app = Server("rag-server-debug")
        logger.info("‚úÖ Servidor MCP creado")
    except Exception as e:
        logger.error(f"‚ùå Error creando servidor MCP: {e}")
        return False
    
    logger.info("üéâ TODOS LOS PASOS COMPLETADOS EXITOSAMENTE")
    return True

async def main():
    """Funci√≥n principal de debug"""
    logger.info("üöÄ Iniciando diagn√≥stico del servidor RAG...")
    
    success = await test_initialization()
    
    if success:
        logger.info("‚úÖ Diagn√≥stico completado - El servidor deber√≠a funcionar")
    else:
        logger.error("‚ùå Diagn√≥stico fall√≥ - Revisar errores arriba")
    
    logger.info("üèÅ Finalizando diagn√≥stico...")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è Diagn√≥stico interrumpido por usuario")
    except Exception as e:
        logger.error(f"üí• Error fatal: {e}")
        import traceback
        traceback.print_exc()