version: '3.8'

services:
  # TimescaleDB con PostGIS y pgRouting
  timescaledb:
    image: timescale/timescaledb-ha:pg17-latest
    container_name: mcp_timescaledb
    environment:
      POSTGRES_DB: dwgeo_timescale
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Configuración específica de TimescaleDB
      TIMESCALEDB_TELEMETRY: "off"
      TS_TUNE_MEMORY: 2GB
      TS_TUNE_NUM_CPUS: 2
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/home/postgres/pgdata/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf
    command: 
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dwgeo_timescale"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    shm_size: 256mb

  # PostGIS y pgRouting como extensión en TimescaleDB
  postgis-setup:
    image: postgis/postgis:17-3.5
    container_name: mcp_postgis_setup
    depends_on:
      timescaledb:
        condition: service_healthy
    environment:
      POSTGRES_HOST: timescaledb
      POSTGRES_DB: dwgeo_timescale
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_secure_2024
    volumes:
      - ./docker/postgis-setup.sql:/tmp/postgis-setup.sql
    command: >
      bash -c "
        echo 'Esperando TimescaleDB...' &&
        sleep 10 &&
        PGPASSWORD=postgres_secure_2024 psql -h timescaledb -U postgres -d dwgeo_timescale -f /tmp/postgis-setup.sql &&
        echo 'PostGIS y pgRouting configurados correctamente'
      "
    restart: "no"

  # Ollama para modelos de IA
  ollama:
    image: ollama/ollama:latest
    container_name: mcp_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    command: serve
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mcp_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_secure_2024
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-piechart-panel
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - timescaledb
    restart: unless-stopped

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: mcp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_secure_2024
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx para proxy reverso y servir archivos estáticos
  nginx:
    image: nginx:alpine
    container_name: mcp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./data/maps:/var/www/maps
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - grafana
    restart: unless-stopped

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=90d'
    restart: unless-stopped

  # Node Exporter para métricas del sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mcp_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # Alertmanager para gestión de alertas
  alertmanager:
    image: prom/alertmanager:latest
    container_name: mcp_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped

  # Postgres Exporter para métricas de base de datos
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: mcp_postgres_exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres_secure_2024@timescaledb:5432/dwgeo_timescale?sslmode=disable"
    depends_on:
      - timescaledb
    restart: unless-stopped

volumes:
  timescale_data:
    driver: local
  ollama_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  default:
    name: mcp_network
    driver: bridge